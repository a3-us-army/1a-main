<!DOCTYPE html>
<html>
<head>
  <title>Edit Form</title>
  <meta content="1A Website" property="og:title" />
  <meta content="Welcome to 1A!" property="og:description" />
  <meta content="https://1a75.org/forms/admin/edit/<%= form.id %>" property="og:url" />
  <meta content="https://cdn.xanderxx.xyz/1a-logo.png" property="og:image" />
  <meta content="#4b5a2a" data-react-helmet="true" name="theme-color" />
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css">
  <link rel="stylesheet" href="/custom.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/choices.js/public/assets/styles/choices.min.css">
  <style>
    .form-card {
      background: #23272f;
      color: #fff;
      border-radius: 1rem;
      box-shadow: 0 2px 8px rgba(0,0,0,0.07);
      border: 1.5px solid #23272f;
      max-width: 600px;
      margin: 0 auto;
    }
    .form-card .card-title {
      color: #ffe066;
      font-size: 1.25rem;
      font-weight: 600;
      text-shadow: 0 1px 2px #000, 0 0 2px #23272f;
    }
    .form-label, .form-check-label {
      color: #ffe066;
      font-weight: 500;
    }
    .form-control, .form-select {
      background: #181a1b;
      color: #fff;
      border: 1.5px solid #444;
    }
    .form-control:focus, .form-select:focus {
      border-color: #ffe066;
      box-shadow: 0 0 0 0.2rem rgba(255,224,102,0.15);
    }
    .removeFieldBtn {
      font-size: 1.2rem;
      padding: 0.2rem 0.7rem;
    }
    .create-form-btn {
      background-color: #ffe066 !important;
      color: #23272f !important;
      font-weight: 600;
      border: 2px solid #ffd43b !important;
      box-shadow: 0 1px 4px rgba(0,0,0,0.08);
      transition: background 0.2s, color 0.2s;
    }
    .create-form-btn:hover, .create-form-btn:focus {
      background-color: #ffd43b !important;
      color: #181a1b !important;
      border-color: #ffe066 !important;
      text-decoration: none;
    }
    .choices__item--selectable[style] {
      display: flex;
      align-items: center;
      gap: 0.5em;
    }
    .role-icon {
      width: 1.1em;
      height: 1.1em;
      vertical-align: middle;
      margin-right: 0.3em;
      margin-bottom: 0.15em;
      object-fit: contain;
      display: inline-block;
    }
  </style>
</head>
<body>
  <%- include("partials/navbar", { user, active }) %>
  <div class="container mt-4">
    <div class="card form-card p-3">
      <h2 class="card-title mb-3"><i class="bi bi-ui-checks-grid me-2"></i>Edit Form</h2>
      <% if (error) { %>
        <div class="alert alert-danger"><%= error %></div>
      <% } %>
      <form method="POST" action="/forms/admin/edit/<%= form.id %>" id="formBuilder">
        <div class="mb-3">
          <label class="form-label">Form Title</label>
          <input type="text" name="title" class="form-control" required value="<%= form.title %>">
        </div>
        <div class="mb-3">
          <label class="form-label">Description (optional)</label>
          <textarea name="description" class="form-control"><%= form.description %></textarea>
        </div>
        <div class="mb-3">
          <label class="form-label">Ping Role (optional)</label>
          <select id="pingRoleSelect" name="ping_role_id">
            <option value="">No ping</option>
            <% roles.forEach(role => { 
              const hex = role.color.toString(16).padStart(6, '0');
              const iconUrl = role.icon
                ? `https://cdn.discordapp.com/role-icons/${role.id}/${role.icon}.png`
                : "";
              const emoji = role.unicode_emoji || "";
              const customProps = JSON.stringify({
                color: `#${hex}`,
                icon: iconUrl,
                emoji: emoji
              });
            %>
              <option value="<%= role.id %>" data-custom-properties='<%= customProps %>' <%= form.ping_role_id === role.id ? "selected" : "" %>>
                <%= role.name %>
              </option>
            <% }) %>
          </select>
        </div>
        <hr>
        <h5 class="mb-2" style="color:#ffe066;">Fields</h5>
        <div id="fieldsContainer">
          <% if (form && form.fields) { form.fields.forEach(function(field, idx) { %>
            <div class="mb-2 row">
              <div class="col-md-4 mb-1">
                <input type="text" name="field_names" class="form-control" placeholder="Field Name (no spaces)" required value="<%= field.name %>">
              </div>
              <div class="col-md-5 mb-1">
                <input type="text" name="field_labels" class="form-control" placeholder="Field Label" required value="<%= field.label %>">
              </div>
              <div class="col-md-2 mb-1">
                <div class="form-check">
                  <input class="form-check-input" type="checkbox" name="field_required" value="1" <%= field.required ? "checked" : "" %>>
                  <label class="form-check-label">Required</label>
                </div>
              </div>
              <div class="col-md-1 mb-1">
                <button type="button" class="btn btn-danger btn-sm removeFieldBtn">&times;</button>
              </div>
            </div>
          <% }) } %>
        </div>
        <button type="button" class="btn btn-secondary mb-3" id="addFieldBtn">
          <i class="bi bi-plus-circle"></i> Add Field
        </button>
        <div>
          <button type="submit" class="btn create-form-btn">
            <i class="bi bi-check2-circle"></i> Save Changes
          </button>
        </div>
      </form>
    </div>
  </div>
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/choices.js/public/assets/scripts/choices.min.js"></script>
  <script>
    // Dynamic field builder
    const fieldsContainer = document.getElementById("fieldsContainer");
    document.getElementById("addFieldBtn").onclick = function() {
      const fieldDiv = document.createElement("div");
      fieldDiv.className = "mb-2 row";
      fieldDiv.innerHTML = `
        <div class="col-md-4 mb-1">
          <input type="text" name="field_names" class="form-control" placeholder="Field Name (no spaces)" required>
        </div>
        <div class="col-md-5 mb-1">
          <input type="text" name="field_labels" class="form-control" placeholder="Field Label" required>
        </div>
        <div class="col-md-2 mb-1">
          <div class="form-check">
            <input class="form-check-input" type="checkbox" name="field_required" value="1">
            <label class="form-check-label">Required</label>
          </div>
        </div>
        <div class="col-md-1 mb-1">
          <button type="button" class="btn btn-danger btn-sm removeFieldBtn">&times;</button>
        </div>
      `;
      fieldsContainer.appendChild(fieldDiv);
      fieldDiv.querySelector(".removeFieldBtn").onclick = () => fieldDiv.remove();
    };

    // Choices.js for role select with color and icon
    document.addEventListener("DOMContentLoaded", function() {
      const select = document.getElementById('pingRoleSelect');
      if (!select) return;
      new Choices(select, {
        searchEnabled: true,
        itemSelectText: '',
        callbackOnCreateTemplates: function(template) {
          return {
            option: (classNames, data) => {
              let props = {};
              try { props = JSON.parse(data.customProperties); } catch {}
              // Calculate readable text color
              let textColor = "#fff";
              if (props.color) {
                const hex = props.color.replace("#", "");
                const r = parseInt(hex.substring(0,2), 16);
                const g = parseInt(hex.substring(2,4), 16);
                const b = parseInt(hex.substring(4,6), 16);
                const luminance = 0.299*r + 0.587*g + 0.114*b;
                textColor = luminance > 186 ? "#222" : "#fff";
              }
              return template(`
                <div class="choices__item choices__item--selectable"
                  style="background:${props.color || '#23272f'};color:${textColor};">
                  ${props.icon ? `<img src="${props.icon}" class="role-icon">` : ''}
                  ${props.emoji ? `<span class="role-icon">${props.emoji}</span>` : ''}
                  ${data.label}
                </div>
              `);
            }
          };
        }
      });
      // Remove field button for pre-filled fields
      document.querySelectorAll(".removeFieldBtn").forEach(btn => {
        btn.onclick = () => btn.closest('.row').remove();
      });
    });
  </script>
</body>
</html>