<!DOCTYPE html>
<html>
  <head>
    <title>PERSTAT</title>
    <meta content="1A Website" property="og:title" />
    <meta content="Welcome to 1A!" property="og:description" />
    <meta content="https://1a75.org/personnel" property="og:url" />
    <meta content="https://cdn.xanderxx.xyz/1a-logo.png" property="og:image" />
    <meta content="#4b5a2a" data-react-helmet="true" name="theme-color" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta
      http-equiv="Cache-Control"
      content="no-cache, no-store, must-revalidate"
    />
    <meta http-equiv="Pragma" content="no-cache" />
    <meta http-equiv="Expires" content="0" />
    <meta name="version" content="2024-01-27-v3" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link rel="icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/custom.css?v=2" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css"
    />
    <style>
      .platoon-title {
        font-size: 1.5rem;
        font-weight: 700;
        color: #ffe066;
        margin-bottom: 0.5rem;
        margin-top: 2rem;
      }
      .table-dark th,
      .table-dark td {
        color: #fff;
        background-color: #23272f;
      }
      .table-dark thead th {
        background-color: #181a1b;
      }
      .badge-reserve {
        background: #1a237e !important;
        color: #fff !important;
      }
      @media (max-width: 600px) {
        .platoon-title {
          font-size: 1.1rem;
          margin-top: 1.2rem;
        }
        .table-responsive {
          font-size: 0.95rem;
        }
      }
      
      /* Loading screen styles */
      #loading-screen {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(135deg, #241d1d 0%, #2d2d2d 50%, #291e1e 100%);
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        z-index: 9999;
        transition: opacity 0.5s ease-out;
      }
      
      .loading-spinner {
        width: 80px;
        height: 80px;
        border: 4px solid rgba(225, 184, 76, 0.2);
        border-left: 4px solid #e1b84c;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 20px;
      }
      
      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }
      
      .loading-text {
        color: #e1b84c;
        font-size: 1.2rem;
        font-weight: 500;
        text-align: center;
        margin-bottom: 10px;
      }
      
      .loading-subtext {
        color: #aaa;
        font-size: 0.9rem;
        text-align: center;
      }
      
      .loading-dots {
        display: inline-block;
        animation: dots 1.5s infinite;
      }
      
      @keyframes dots {
        0%, 20% { content: ""; }
        40% { content: "."; }
        60% { content: ".."; }
        80%, 100% { content: "..."; }
      }
      
      .loading-dots::after {
        content: "";
        animation: dots 1.5s infinite;
      }
      
      #main-content {
        opacity: 0;
        transition: opacity 0.5s ease-in;
      }
      
      #main-content.loaded {
        opacity: 1;
      }
    </style>
  </head>
  <body>
    <!-- Loading Screen -->
    <div id="loading-screen">
      <div class="loading-spinner"></div>
      <div class="loading-text">Loading Personnel Data</div>
      <div class="loading-subtext">Fetching data from Google Sheets<span class="loading-dots"></span></div>
    </div>
    
    <%- include("../partials/navbar", { user, active }) %>
    <div class="container mt-5" id="main-content">
      <h2 class="mb-4 text-center">
        <i class="bi bi-people me-2"></i>All Personnel
      </h2>
      <div id="platoon-sections">
        <!-- Sections will be rendered here by JS -->
      </div>
      <div id="aviation-section" class="mt-5"></div>
      <div id="callsigns-section" class="mt-5"></div>
    </div>
    <%- include("../partials/footer") %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js?v=2"></script>
    <script>
      // Helper: Determine which main group a section belongs to
      function getSectionType(sectionName) {
        if (!sectionName) return 'other';
        const name = sectionName.toLowerCase();

        // Command: HQ and Platoon Command
        if (
          name.includes('hq') ||
          name === '1st platoon, alpha company' ||
          name === 'alpha company headquarters'
        ) {
          return 'command';
        }

        // Platoon: All squads (except HQ, support, etc.)
        if (
          name.includes('squad') ||
          name.includes('weapons') ||
          name.includes('security')
        ) {
          return 'platoon';
        }

        // Support: Fires, Sniper, Reserves, etc.
        if (
          name.includes('fires cell') ||
          name.includes('sniper') ||
          name.includes('reserves') ||
          name.includes('mortar') ||
          name.includes('support')
        ) {
          return 'support';
        }

        // Default fallback
        return 'other';
      }

      // Section header: only position is filled
      function isSectionHeader(row) {
        return (
          row.position &&
          (!row.callsign || row.callsign.trim() === '') &&
          (!row.status || row.status.trim() === '') &&
          (!row.name || row.name.trim() === '')
        );
      }

      async function loadPersonnelCards() {
        const res = await fetch('/personnel/api/personnel');
        const personnel = await res.json();
        const container = document.getElementById('platoon-sections');
        let html = '';

        if (!Array.isArray(personnel) || personnel.length === 0) {
          html = `<div class="alert alert-info text-center">No personnel data found.</div>`;
        } else {
          // Group personnel by section
          const sections = [];
          let currentSection = null;

          personnel.forEach(row => {
            if (isSectionHeader(row)) {
              currentSection = {
                name: row.position,
                members: [],
              };
              sections.push(currentSection);
            } else if (currentSection) {
              currentSection.members.push(row);
            }
          });

          // Organize sections into main groups
          const groups = {
            command: [],
            platoon: [],
            support: [],
            other: [],
          };

          sections.forEach(section => {
            const type = getSectionType(section.name);
            groups[type] = groups[type] || [];
            groups[type].push(section);
          });

          // Helper: Card color classes
          const cardStyles = {
            command: {
              border: 'border-success',
              text: 'text-success',
              icon: 'bi-shield-lock-fill',
            },
            platoon: {
              border: 'border-primary',
              text: 'text-primary',
              icon: 'bi-people-fill',
            },
            support: {
              border: 'border-info',
              text: 'text-info',
              icon: 'bi-truck',
            },
            other: {
              border: 'border-secondary',
              text: 'text-secondary',
              icon: 'bi-question-circle',
            },
          };

          // Render each group
          function renderGroup(title, type) {
            if (!groups[type] || groups[type].length === 0) return '';
            let groupHtml = `
          <div class="col-12">
            <h3 class="mb-3 mt-4 ${cardStyles[type].text}">
              <i class="bi ${cardStyles[type].icon} me-2"></i>${title}
            </h3>
          </div>
        `;
            // Render each section as a card
            groups[type].forEach(section => {
              groupHtml += `
            <div class="col-12 col-md-6 col-lg-4">
              <div class="card shadow h-100 ${cardStyles[type].border} border-2">
                <div class="card-header bg-dark ${cardStyles[type].text} fw-bold">
                  <i class="bi ${cardStyles[type].icon} me-2"></i>${section.name}
                </div>
                <div class="card-body p-0">
                  <div class="table-responsive">
                    <table class="table table-dark table-striped table-bordered table-hover table-sm align-middle mb-0">
                      <thead style="background: #181a1b;">
                        <tr>
                          <th>Position</th>
                          <th>Callsign</th>
                          <th>Status</th>
                          <th>Name</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${
                          section.members.length === 0
                            ? `<tr><td colspan="4" class="text-center text-muted">No members</td></tr>`
                            : section.members
                                .map(
                                  row => `
                              <tr>
                                <td>${row.position || ''}</td>
                                <td>${row.callsign || ''}</td>
                                <td>
                                  ${
                                    row.status === 'Active'
                                      ? `<span class="badge bg-success"><i class="bi bi-check-circle me-1"></i>Active</span>`
                                      : row.status === 'Empty'
                                        ? `<span class="badge bg-secondary"><i class="bi bi-dash-circle me-1"></i>Empty</span>`
                                        : row.status === 'Closed'
                                          ? `<span class="badge bg-danger"><i class="bi bi-x-circle me-1"></i>Closed</span>`
                                          : row.status === 'LOA'
                                            ? `<span class="badge bg-warning text-dark"><i class="bi bi-exclamation-circle me-1"></i>LOA</span>`
                                            : row.status
                                              ? `<span class="badge bg-warning text-dark"><i class="bi bi-exclamation-circle me-1"></i>${row.status}</span>`
                                              : ''
                                  }
                                </td>
                                <td>${row.name || ''}</td>
                              </tr>
                            `
                                )
                                .join('')
                        }
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          `;
            });
            return groupHtml;
          }

          html += `<div class="row g-4">`;
          html += renderGroup('Command', 'command');
          html += renderGroup('Platoon', 'platoon');
          html += renderGroup('Support', 'support');
          html += renderGroup('Other', 'other');
          html += `</div>`;
        }
        container.innerHTML = html;
      }

      async function loadAviationTable() {
        const res = await fetch('/personnel/api/aviation');
        const aviation = await res.json();
        const container = document.getElementById('aviation-section');
        let html = '';

        if (!Array.isArray(aviation) || aviation.length === 0) {
          html = `<div class="alert alert-info text-center">No aviation data found.</div>`;
        } else {
          // Group by section header (TF160th, AvTEG)
          const groups = [];
          let currentGroup = null;

          aviation.forEach(row => {
            const isHeader =
              row.position &&
              (!row.status || row.status.trim() === '') &&
              (!row.name || row.name.trim() === '');

            if (isHeader) {
              currentGroup = {
                name: row.position,
                members: [],
              };
              groups.push(currentGroup);
            } else if (currentGroup) {
              currentGroup.members.push(row);
            }
          });

          html += `
        <div class="row g-4">
          <div class="col-12">
            <h3 class="mb-3 mt-4 text-info">
              <i class="bi bi-airplane me-2"></i>Aviation
            </h3>
          </div>
          ${groups
            .map(
              group => `
            <div class="col-12 col-md-6">
              <div class="card shadow h-100 border-info border-2">
                <div class="card-header bg-dark text-info fw-bold">
                  <i class="${
                    group.name.toLowerCase().includes('160')
                      ? 'fa-solid fa-helicopter'
                      : 'fa-solid fa-plane'
                  } me-2"></i>${group.name}
                </div>
                <div class="card-body p-0">
                  <div class="table-responsive">
                    <table class="table table-dark table-striped table-bordered table-hover table-sm align-middle mb-0">
                      <thead style="background: #181a1b;">
                        <tr>
                          <th>Position</th>
                          <th>Status</th>
                          <th>Name</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${
                          group.members.length === 0
                            ? `<tr><td colspan="3" class="text-center text-muted">No members</td></tr>`
                            : group.members
                                .map(
                                  row => `
                            <tr>
                              <td>${row.position || ''}</td>
                              <td>
                                ${
                                  row.status === 'Active'
                                    ? `<span class="badge bg-success"><i class="bi bi-check-circle me-1"></i>Active</span>`
                                    : row.status === 'Empty'
                                      ? `<span class="badge bg-secondary"><i class="bi bi-dash-circle me-1"></i>Empty</span>`
                                      : row.status === 'Closed'
                                        ? `<span class="badge bg-danger"><i class="bi bi-x-circle me-1"></i>Closed</span>`
                                        : row.status === 'LOA'
                                          ? `<span class="badge bg-warning text-dark"><i class="bi bi-exclamation-circle me-1"></i>LOA</span>`
                                          : row.status
                                            ? `<span class="badge bg-warning text-dark"><i class="bi bi-exclamation-circle me-1"></i>${row.status}</span>`
                                            : ''
                                }
                              </td>
                              <td>${row.name || ''}</td>
                            </tr>
                          `
                                )
                                .join('')
                        }
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          `
            )
            .join('')}
        </div>
      `;
        }
        container.innerHTML = html;
      }

      async function loadCallsignsTable() {
        const container = document.getElementById('callsigns-section');
        
        // Callsigns data from the image - alternating aircraft models and callsigns
        const callsignsData = [
          // Row 1: Callsigns
          { type: 'callsign', a10: 'HAWG 1', f15:'KILLJOY 4', f16: 'JEDI 6', ac130: 'MALIGN 3' },
          // Row 2: Aircraft Models
          { type: 'aircraft', a10: 'MC-130', f15: 'C-17', f16: 'MQ-9', ac130: 'MH-6' },
          // Row 3: Callsigns
          { type: 'callsign', a10: 'ASCOT', f15: 'HEAVY', f16: 'ROCKY 1', ac130: 'STAR 7' },
          // Row 4: Aircraft Models
          { type: 'aircraft', a10: 'AH-6', f15: 'MH-60', f16: 'MH-60 DAP', ac130: 'MH-47' },
          // Row 5: Callsigns
          { type: 'callsign', a10: 'STING 7', f15: 'JUDGE 3', f16: 'FURY 1', ac130: 'RAGE 2' }
        ];

        let html = `
          <div class="row g-4">
            <div class="col-12">
              <h3 class="mb-3 mt-4 text-info">
                <i class="bi bi-broadcast me-2"></i>Callsigns
              </h3>
            </div>
            <div class="col-12">
              <div class="card shadow border-info border-2">
                <div class="card-header bg-dark text-info fw-bold">
                  <i class="bi bi-airplane me-2"></i>Aircraft Callsigns
                </div>
                <div class="card-body p-0">
                  <div class="table-responsive">
                    <table class="table table-dark table-striped table-bordered table-hover table-sm align-middle mb-0">
                      <thead style="background: #181a1b;">
                        <tr>
                          <th>A-10</th>
                          <th>F-15</th>
                          <th>F-16</th>
                          <th>AC-130</th>
                        </tr>
                      </thead>
                      <tbody>
                        ${callsignsData.map(row => `
                          <tr>
                            <td>${row.type === 'callsign' ? `<span class="badge bg-info text-dark">${row.a10}</span>` : row.a10}</td>
                            <td>${row.type === 'callsign' ? `<span class="badge bg-info text-dark">${row.f15}</span>` : row.f15}</td>
                            <td>${row.type === 'callsign' ? `<span class="badge bg-info text-dark">${row.f16}</span>` : row.f16}</td>
                            <td>${row.type === 'callsign' ? `<span class="badge bg-info text-dark">${row.ac130}</span>` : row.ac130}</td>
                          </tr>
                        `).join('')}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </div>
          </div>
          <div class="row mt-4">
            <div class="col-12">
              <div class="card border-info border-2">
                <div class="card-header bg-dark text-info fw-bold">
                  <i class="bi bi-info-circle me-2"></i>Radio Communication Guide
                </div>
                <div class="card-body">
                  <div class="row">
                    <div class="col-md-6">
                      <h6 class="text-info">Example Communication:</h6>
                      <p class="text-light"><code>"Dude 4-1 this is TYRANT12 radio check, channel 7, k"</code></p>
                    </div>
                    <div class="col-md-6">
                      <h6 class="text-info">Callsign Numbering:</h6>
                      <p class="text-light">The second number suffix in the callsign resembles the pilot seniority in the flight. Most senior pilot being 1 and junior pilot being 2.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
        
        container.innerHTML = html;
      }

      // Function to hide loading screen and show content
      function hideLoadingScreen() {
        const loadingScreen = document.getElementById('loading-screen');
        const mainContent = document.getElementById('main-content');
        
        // Fade out loading screen
        loadingScreen.style.opacity = '0';
        
        // After fade out, hide loading screen and show content
        setTimeout(() => {
          loadingScreen.style.display = 'none';
          mainContent.classList.add('loaded');
        }, 500);
      }

      // Main initialization function
      async function initializePage() {
        try {
          // Load all data concurrently
          await Promise.all([
            loadPersonnelCards(),
            loadAviationTable(),
            loadCallsignsTable()
          ]);
          
          // Hide loading screen after all data is loaded
          hideLoadingScreen();
        } catch (error) {
          console.error('Error loading personnel data:', error);
          // Still hide loading screen even if there's an error
          hideLoadingScreen();
        }
      }

      // Start loading when DOM is ready
      document.addEventListener('DOMContentLoaded', initializePage);
    </script>
  </body>
</html>
