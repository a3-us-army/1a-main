<!DOCTYPE html>
<html>
  <head>
    <title>Codebase Backup - 1A 75th</title>
    <meta content="1A Website" property="og:title" />
    <meta content="Welcome to 1A!" property="og:description" />
    <meta content="https://1a75.org/admin/codebase-backup" property="og:url" />
    <meta content="https://cdn.xanderxx.xyz/1a-logo.png" property="og:image" />
    <meta content="#4b5a2a" data-react-helmet="true" name="theme-color" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css"
    />
    <link rel="icon" href="/favicon.ico" />
    <link rel="stylesheet" href="/custom.css" />
    <style>
      .file-tree {
        background: rgba(0, 0, 0, 0.1);
        border-radius: 8px;
        padding: 1rem;
        max-height: 400px;
        overflow-y: auto;
        font-family: 'Courier New', monospace;
        font-size: 0.9rem;
      }
      
      .file-tree-item {
        padding: 0.2rem 0;
        cursor: pointer;
        transition: background-color 0.2s;
        border-radius: 4px;
        margin: 1px 0;
        display: flex;
        align-items: center;
        justify-content: space-between;
      }
      
      .file-tree-item:hover {
        background-color: rgba(255, 255, 255, 0.1);
      }
      
      .file-tree-item.directory {
        color: #ffe066;
        font-weight: 600;
      }
      
      .file-tree-item.file {
        color: #fff;
      }
      
      .file-tree-item.excluded {
        color: #6c757d;
        text-decoration: line-through;
        opacity: 0.6;
      }
      
      .file-tree-item.excluded:hover {
        background-color: rgba(108, 117, 125, 0.2);
      }
      
      .file-tree-content {
        display: flex;
        align-items: center;
        flex: 1;
      }
      
      .file-tree-actions {
        display: flex;
        gap: 0.5rem;
        opacity: 0;
        transition: opacity 0.2s;
      }
      
      .file-tree-item:hover .file-tree-actions {
        opacity: 1;
      }
      
      .exclude-btn {
        background: rgba(220, 53, 69, 0.2);
        border: 1px solid rgba(220, 53, 69, 0.3);
        color: #dc3545;
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .exclude-btn:hover {
        background: rgba(220, 53, 69, 0.3);
        color: #fff;
      }
      
      .include-btn {
        background: rgba(25, 135, 84, 0.2);
        border: 1px solid rgba(25, 135, 84, 0.3);
        color: #198754;
        padding: 0.2rem 0.5rem;
        border-radius: 4px;
        font-size: 0.75rem;
        cursor: pointer;
        transition: all 0.2s;
      }
      
      .include-btn:hover {
        background: rgba(25, 135, 84, 0.3);
        color: #fff;
      }
      
      .expand-icon {
        transition: transform 0.2s;
        margin-right: 0.5rem;
        cursor: pointer;
      }
      
      .expand-icon.expanded {
        transform: rotate(90deg);
      }
      
      .file-tree-children {
        margin-left: 1.5rem;
        display: none;
      }
      
      .file-tree-children.expanded {
        display: block;
      }
      
      .exclusion-config {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        margin-bottom: 2rem;
      }
      
      .exclusion-list {
        max-height: 200px;
        overflow-y: auto;
        background: rgba(0, 0, 0, 0.2);
        border-radius: 8px;
        padding: 1rem;
      }
      
      .exclusion-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem;
        margin-bottom: 0.5rem;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 6px;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }
      
      .exclusion-item:last-child {
        margin-bottom: 0;
      }
      
      .backup-stats {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }
      
      .stat-card {
        background: rgba(0, 0, 0, 0.2);
        border-radius: 8px;
        padding: 1rem;
        text-align: center;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }
      
      .stat-number {
        font-size: 2rem;
        font-weight: bold;
        color: #ffe066;
      }
      
      .stat-label {
        color: #adb5bd;
        font-size: 0.9rem;
        margin-top: 0.5rem;
      }
      
      .backup-actions {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
        border-radius: 12px;
        padding: 1.5rem;
        margin-bottom: 2rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }
      
      .action-btn {
        background: linear-gradient(135deg, #ffe066 0%, #ffd43b 100%);
        color: #23272f;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 8px;
        font-weight: 600;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 0.5rem;
        transition: all 0.3s ease;
        box-shadow: 0 4px 15px rgba(255, 224, 102, 0.3);
      }
      
      .action-btn:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 20px rgba(255, 224, 102, 0.4);
        color: #23272f;
        text-decoration: none;
      }
      
      .backup-list {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
      }
      
      .backup-item {
        background: rgba(0, 0, 0, 0.2);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        transition: all 0.3s ease;
      }
      
      .backup-item:hover {
        background: rgba(0, 0, 0, 0.3);
        transform: translateX(5px);
      }
      
      .backup-name {
        font-weight: 600;
        color: #ffe066;
        margin-bottom: 0.5rem;
      }
      
      .backup-meta {
        color: #adb5bd;
        font-size: 0.9rem;
        margin-bottom: 1rem;
      }
      
      .backup-actions-btns {
        display: flex;
        gap: 0.5rem;
        flex-wrap: wrap;
      }
      
      .btn-sm {
        padding: 0.25rem 0.75rem;
        font-size: 0.875rem;
      }
      
      .loading-spinner {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        border: 2px solid #ffe066;
        border-radius: 50%;
        border-top-color: transparent;
        animation: spin 1s ease-in-out infinite;
      }
      
      @keyframes spin {
        to { transform: rotate(360deg); }
      }
      
      .file-structure-section {
        background: linear-gradient(135deg, rgba(255, 255, 255, 0.05) 0%, rgba(255, 255, 255, 0.02) 100%);
        border-radius: 12px;
        padding: 1.5rem;
        border: 1px solid rgba(255, 255, 255, 0.1);
        margin-bottom: 2rem;
      }
      
      .structure-header {
        display: flex;
        justify-content: between;
        align-items: center;
        margin-bottom: 1rem;
      }
      
      .refresh-btn {
        background: rgba(255, 255, 255, 0.1);
        border: 1px solid rgba(255, 255, 255, 0.2);
        color: #fff;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-size: 0.9rem;
        transition: all 0.3s ease;
      }
      
      .refresh-btn:hover {
        background: rgba(255, 255, 255, 0.2);
        color: #fff;
      }
    </style>
  </head>
  <body>
    <%- include('../partials/navbar', { user, active: 'codebase-backup' }) %>
    
    <div class="container mt-5">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
          <h1 class="h2 mb-0 text-white">
            <i class="bi bi-archive me-3"></i>Codebase Backup Management
          </h1>
          <p class="text-muted mt-2">Manage automated codebase backups and view file structure</p>
        </div>
        <div class="d-flex gap-2">
          <button class="action-btn" onclick="createBackup()" id="createBackupBtn">
            <i class="bi bi-plus-circle"></i> Create Backup
          </button>
          <button class="refresh-btn" onclick="loadFileStructure()">
            <i class="bi bi-arrow-clockwise"></i> Refresh Structure
          </button>
        </div>
      </div>

      <% if (alert) { %>
        <div class="alert alert-success alert-dismissible fade show" role="alert">
          <%= alert %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% } %>

      <% if (error) { %>
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
          <%= error %>
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        </div>
      <% } %>

      <!-- Backup Statistics -->
      <div class="backup-stats">
        <h4 class="text-white mb-3">
          <i class="bi bi-graph-up me-2"></i>Backup Statistics
        </h4>
        <div class="row">
          <div class="col-md-3 mb-3">
            <div class="stat-card">
              <div class="stat-number" id="totalBackups">-</div>
              <div class="stat-label">Total Backups</div>
            </div>
          </div>
          <div class="col-md-3 mb-3">
            <div class="stat-card">
              <div class="stat-number" id="totalSize">-</div>
              <div class="stat-label">Total Size</div>
            </div>
          </div>
          <div class="col-md-3 mb-3">
            <div class="stat-card">
              <div class="stat-number" id="lastBackup">-</div>
              <div class="stat-label">Last Backup</div>
            </div>
          </div>
          <div class="col-md-3 mb-3">
            <div class="stat-card">
              <div class="stat-number" id="nextBackup">-</div>
              <div class="stat-label">Next Backup</div>
            </div>
          </div>
        </div>
      </div>

      <!-- Exclusion Configuration -->
      <div class="exclusion-config">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h4 class="text-white mb-0">
            <i class="bi bi-shield-x me-2"></i>Exclusion Rules
          </h4>
          <button class="btn btn-sm btn-outline-primary" onclick="addExclusionRule()">
            <i class="bi bi-plus-circle me-1"></i>Add Rule
          </button>
        </div>
        <div class="exclusion-list" id="exclusionList">
          <div class="text-center text-muted">
            <div class="loading-spinner"></div>
            <p class="mt-2">Loading exclusion rules...</p>
          </div>
        </div>
      </div>

      <!-- File Structure Section -->
      <div class="file-structure-section">
        <div class="structure-header">
          <h4 class="text-white mb-0">
            <i class="bi bi-folder2-open me-2"></i>Codebase File Structure
          </h4>
          <small class="text-muted">Click folders to expand/collapse. Hover over files to exclude/include them.</small>
        </div>
        <div class="file-tree" id="fileStructure">
          <div class="text-center text-muted">
            <div class="loading-spinner"></div>
            <p class="mt-2">Loading file structure...</p>
          </div>
        </div>
      </div>

      <!-- Backup Actions -->
      <div class="backup-actions">
        <h4 class="text-white mb-3">
          <i class="bi bi-gear me-2"></i>Backup Configuration
        </h4>
        <div class="row">
          <div class="col-md-6">
            <div class="card bg-dark text-white">
              <div class="card-body">
                <h6 class="card-title">
                  <i class="bi bi-clock me-2"></i>Automated Schedule
                </h6>
                <p class="card-text">Daily backups at 3:00 AM UTC</p>
                <p class="card-text">Maximum 5 backups retained</p>
                <p class="card-text">Automatic cleanup of old backups</p>
              </div>
            </div>
          </div>
          <div class="col-md-6">
            <div class="card bg-dark text-white">
              <div class="card-body">
                <h6 class="card-title">
                  <i class="bi bi-cloud-upload me-2"></i>Cloud Storage
                </h6>
                <p class="card-text">Automatic upload to Cloudflare R2</p>
                <p class="card-text">Global CDN access</p>
                <p class="card-text">Cost-effective storage solution</p>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Backup List -->
      <div class="backup-list">
        <h4 class="text-white mb-3">
          <i class="bi bi-list-ul me-2"></i>Available Backups
        </h4>
        <div id="backupList">
          <div class="text-center text-muted">
            <div class="loading-spinner"></div>
            <p class="mt-2">Loading backups...</p>
          </div>
        </div>
      </div>
    </div>

    <%- include('../partials/footer') %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Load initial data
      document.addEventListener('DOMContentLoaded', function() {
        loadBackups();
        loadFileStructure();
        loadBackupStats();
        loadExclusionRules();
      });

      async function loadBackups() {
        const backupList = document.getElementById('backupList');
        
        try {
          const response = await fetch('/codebase-backup/list');
          const backups = await response.json();
          
          if (backups.length === 0) {
            backupList.innerHTML = `
              <div class="text-center text-muted">
                <i class="bi bi-archive-x" style="font-size: 3rem;"></i>
                <p class="mt-3">No backups found</p>
                <p class="text-muted">Create your first backup to get started</p>
              </div>
            `;
            return;
          }
          
          let html = '';
          backups.forEach(backup => {
            const size = (backup.size / 1024 / 1024).toFixed(2);
            const created = new Date(backup.created).toLocaleString();
            
            html += `
              <div class="backup-item">
                <div class="backup-name">
                  <i class="bi bi-file-earmark-zip me-2"></i>${backup.name}
                </div>
                <div class="backup-meta">
                  <i class="bi bi-calendar me-1"></i>${created} | 
                  <i class="bi bi-hdd me-1"></i>${size} MB
                </div>
                <div class="backup-actions-btns">
                  <a href="/codebase-backup/download/${backup.name}" class="btn btn-sm btn-outline-primary">
                    <i class="bi bi-download me-1"></i>Download
                  </a>
                  <button class="btn btn-sm btn-outline-danger" onclick="deleteBackup('${backup.name}')">
                    <i class="bi bi-trash me-1"></i>Delete
                  </button>
                </div>
              </div>
            `;
          });
          
          backupList.innerHTML = html;
        } catch (error) {
          console.error('Error loading backups:', error);
          backupList.innerHTML = '<div class="alert alert-danger">Failed to load backups</div>';
        }
      }

      async function loadFileStructure() {
        const fileStructure = document.getElementById('fileStructure');
        fileStructure.innerHTML = `
          <div class="text-center text-muted">
            <div class="loading-spinner"></div>
            <p class="mt-2">Loading file structure...</p>
          </div>
        `;
        
        try {
          const response = await fetch('/codebase-backup/structure');
          const structure = await response.json();
          
          // Build tree structure
          const tree = buildTree(structure);
          const html = renderTree(tree);
          
          fileStructure.innerHTML = html;
          
          // Add event listeners
          addTreeEventListeners();
        } catch (error) {
          console.error('Error loading file structure:', error);
          fileStructure.innerHTML = '<div class="alert alert-danger">Failed to load file structure</div>';
        }
      }

      function buildTree(structure) {
        const tree = [];
        const map = {};
        
        // Create map of all items
        structure.forEach(item => {
          map[item.path] = { ...item, children: [] };
        });
        
        // Build tree structure
        structure.forEach(item => {
          const parentPath = item.path.split('/').slice(0, -1).join('/');
          
          if (parentPath === '') {
            tree.push(map[item.path]);
          } else if (map[parentPath]) {
            map[parentPath].children.push(map[item.path]);
          }
        });
        
        return tree;
      }

      function renderTree(items, depth = 0) {
        let html = '';
        
        items.forEach(item => {
          const icon = item.type === 'directory' ? 'bi-folder2' : 'bi-file-earmark';
          const className = item.excluded ? 'excluded' : (item.type === 'directory' ? 'directory' : 'file');
          const expandIcon = item.type === 'directory' ? 'bi-chevron-right expand-icon' : '';
          const hasChildren = item.children && item.children.length > 0;
          
          html += `
            <div class="file-tree-item ${className}" data-path="${item.path}" data-type="${item.type}">
              <div class="file-tree-content">
                ${item.type === 'directory' ? `<i class="bi ${expandIcon}" data-path="${item.path}"></i>` : ''}
                <i class="bi ${icon} me-1"></i>
                <span>${item.name}</span>
                ${item.excluded ? '<span class="badge bg-secondary ms-2">Excluded</span>' : ''}
              </div>
              <div class="file-tree-actions">
                ${item.excluded ? 
                  `<button class="include-btn" onclick="toggleExclusion('${item.path}', false)">Include</button>` :
                  `<button class="exclude-btn" onclick="toggleExclusion('${item.path}', true)">Exclude</button>`
                }
              </div>
            </div>
          `;
          
          if (hasChildren) {
            html += `<div class="file-tree-children" data-parent="${item.path}">`;
            html += renderTree(item.children, depth + 1);
            html += '</div>';
          }
        });
        
        return html;
      }

      function addTreeEventListeners() {
        // Add click handlers for expand/collapse
        document.querySelectorAll('.expand-icon').forEach(icon => {
          icon.addEventListener('click', function(e) {
            e.stopPropagation();
            const path = this.getAttribute('data-path');
            const children = document.querySelector(`[data-parent="${path}"]`);
            const isExpanded = this.classList.contains('expanded');
            
            if (isExpanded) {
              this.classList.remove('expanded');
              children.classList.remove('expanded');
            } else {
              this.classList.add('expanded');
              children.classList.add('expanded');
            }
          });
        });
      }

      async function loadBackupStats() {
        try {
          const response = await fetch('/codebase-backup/stats');
          const stats = await response.json();
          
          document.getElementById('totalBackups').textContent = stats.totalBackups;
          document.getElementById('totalSize').textContent = stats.totalSize;
          document.getElementById('lastBackup').textContent = stats.lastBackup || 'Never';
          document.getElementById('nextBackup').textContent = stats.nextBackup;
        } catch (error) {
          console.error('Error loading backup stats:', error);
        }
      }

      async function createBackup() {
        const btn = document.getElementById('createBackupBtn');
        const originalText = btn.innerHTML;
        
        btn.disabled = true;
        btn.innerHTML = '<div class="loading-spinner"></div> Creating Backup...';
        
        try {
          const response = await fetch('/codebase-backup/trigger', {
            method: 'POST'
          });
          
          if (response.ok) {
            showAlert('Backup created successfully!', 'success');
            loadBackups();
            loadBackupStats();
          } else {
            throw new Error('Failed to create backup');
          }
        } catch (error) {
          console.error('Error creating backup:', error);
          showAlert('Failed to create backup', 'danger');
        } finally {
          btn.disabled = false;
          btn.innerHTML = originalText;
        }
      }

      async function deleteBackup(filename) {
        if (!confirm('Are you sure you want to delete this backup?')) {
          return;
        }
        
        try {
          const response = await fetch(`/codebase-backup/delete/${filename}`, {
            method: 'DELETE'
          });
          
          if (response.ok) {
            showAlert('Backup deleted successfully!', 'success');
            loadBackups();
            loadBackupStats();
          } else {
            throw new Error('Failed to delete backup');
          }
        } catch (error) {
          console.error('Error deleting backup:', error);
          showAlert('Failed to delete backup', 'danger');
        }
      }

      function showAlert(message, type) {
        // Remove any existing alerts
        const existingAlert = document.querySelector('.alert');
        if (existingAlert) {
          existingAlert.remove();
        }

        // Create new alert
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.innerHTML = `
          ${message}
          <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;

        // Insert alert at the top of the container
        const container = document.querySelector('.container');
        container.insertBefore(alertDiv, container.firstChild);

        // Auto-dismiss after 5 seconds
        setTimeout(() => {
          if (alertDiv.parentNode) {
            alertDiv.remove();
          }
        }, 5000);
      }

      async function loadExclusionRules() {
        const exclusionList = document.getElementById('exclusionList');
        
        try {
          const response = await fetch('/codebase-backup/exclusions');
          const exclusions = await response.json();
          
          if (exclusions.length === 0) {
            exclusionList.innerHTML = `
              <div class="text-center text-muted">
                <p>No custom exclusion rules</p>
                <small>Default exclusions are applied automatically</small>
              </div>
            `;
            return;
          }
          
          let html = '';
          exclusions.forEach(rule => {
            const typeLabel = rule.type === 'exclude' ? 'exclude' : rule.type;
            html += `
              <div class="exclusion-item">
                <div>
                  <strong>${rule.pattern}</strong>
                  <br><small class="text-muted">${typeLabel}</small>
                </div>
                <button class="btn btn-sm btn-outline-danger" onclick="removeExclusionRule('${rule.pattern}')">
                  <i class="bi bi-trash"></i>
                </button>
              </div>
            `;
          });
          
          exclusionList.innerHTML = html;
        } catch (error) {
          console.error('Error loading exclusion rules:', error);
          exclusionList.innerHTML = '<div class="alert alert-danger">Failed to load exclusion rules</div>';
        }
      }

      async function toggleExclusion(path, exclude) {
        try {
          const response = await fetch('/codebase-backup/exclusions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              pattern: path,
              type: exclude ? 'exclude' : 'include',
              action: exclude ? 'add' : 'remove'
            })
          });
          
          if (response.ok) {
            showAlert(`File ${exclude ? 'excluded' : 'included'} successfully!`, 'success');
            loadFileStructure();
            loadExclusionRules();
          } else {
            throw new Error('Failed to update exclusion');
          }
        } catch (error) {
          console.error('Error updating exclusion:', error);
          showAlert('Failed to update exclusion', 'danger');
        }
      }

      async function addExclusionRule() {
        const pattern = prompt('Enter file or directory pattern to exclude (e.g., "*.log" or "temp/")');
        if (!pattern) return;
        
        try {
          const response = await fetch('/codebase-backup/exclusions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              pattern: pattern,
              type: 'exclude',
              action: 'add'
            })
          });
          
          if (response.ok) {
            showAlert('Exclusion rule added successfully!', 'success');
            loadFileStructure();
            loadExclusionRules();
          } else {
            throw new Error('Failed to add exclusion rule');
          }
        } catch (error) {
          console.error('Error adding exclusion rule:', error);
          showAlert('Failed to add exclusion rule', 'danger');
        }
      }

      async function removeExclusionRule(pattern) {
        if (!confirm(`Are you sure you want to remove the exclusion rule for "${pattern}"?`)) {
          return;
        }
        
        try {
          const response = await fetch('/codebase-backup/exclusions', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify({
              pattern: pattern,
              type: 'exclude',
              action: 'remove'
            })
          });
          
          if (response.ok) {
            showAlert('Exclusion rule removed successfully!', 'success');
            loadFileStructure();
            loadExclusionRules();
          } else {
            throw new Error('Failed to remove exclusion rule');
          }
        } catch (error) {
          console.error('Error removing exclusion rule:', error);
          showAlert('Failed to remove exclusion rule', 'danger');
        }
      }
    </script>
  </body>
</html> 