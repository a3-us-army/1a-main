<!DOCTYPE html>
<html>
<head>
    <title>Gallery Admin - 1A Website</title>
    <meta content="1A Website" property="og:title" />
    <meta content="Gallery Administration" property="og:description" />
    <meta content="https://1a75.org/gallery-admin" property="og:url" />
    <meta content="https://cdn.xanderxx.xyz/1a-logo.png" property="og:image" />
    <meta content="#4b5a2a" data-react-helmet="true" name="theme-color" />
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="icon" href="/favicon.ico">
    <link rel="stylesheet" href="/custom.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css">
    <style>
        /* Modern Gallery Admin Styles */
        body {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            background: linear-gradient(135deg, #1a1d24 0%, #23272f 100%);
        }

        .gallery-admin-container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 2rem 1.5rem;
            flex: 1;
            width: 100%;
        }

        .admin-header {
            background: linear-gradient(135deg, #2c313a 0%, #3a3f4a 100%);
            border: none;
            border-radius: 20px;
            padding: 2rem;
            margin-bottom: 3rem;
            text-align: center;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
            position: relative;
            overflow: hidden;
        }

        .admin-header::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255, 224, 102, 0.1) 0%, transparent 50%, rgba(255, 224, 102, 0.05) 100%);
            pointer-events: none;
        }

        .admin-title {
            color: #ffe066;
            font-size: 3rem;
            font-weight: 800;
            margin-bottom: 1rem;
            text-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
            position: relative;
            z-index: 1;
        }

        .admin-subtitle {
            color: #ffffff;
            font-size: 1.2rem;
            opacity: 0.9;
            font-weight: 300;
            position: relative;
            z-index: 1;
        }

        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 1.5rem;
            margin-bottom: 3rem;
        }

        .stat-card {
            background: linear-gradient(135deg, #2c313a 0%, #3a3f4a 100%);
            border: none;
            border-radius: 16px;
            padding: 1.5rem;
            text-align: center;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
            overflow: hidden;
        }

        .stat-card::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #ffe066, #ffd700, #ffe066);
            transform: scaleX(0);
            transition: transform 0.3s ease;
        }

        .stat-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 35px rgba(0, 0, 0, 0.3);
        }

        .stat-card:hover::before {
            transform: scaleX(1);
        }

        .stat-number {
            color: #ffe066;
            font-size: 2.5rem;
            font-weight: 800;
            margin-bottom: 0.5rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .stat-label {
            color: #ffffff;
            font-size: 1rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .action-buttons {
            display: flex;
            gap: 1rem;
            margin-bottom: 2rem;
            flex-wrap: wrap;
            justify-content: center;
        }

        .action-btn {
            background: linear-gradient(135deg, #007bff, #0056b3);
            border: none;
            color: white;
            font-weight: 700;
            padding: 1rem 2rem;
            border-radius: 12px;
            font-size: 1rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            box-shadow: 0 8px 20px rgba(0, 123, 255, 0.3);
            position: relative;
            overflow: hidden;
        }

        .action-btn::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
            transition: left 0.5s;
        }

        .action-btn:hover::before {
            left: 100%;
        }

        .action-btn:hover {
            transform: translateY(-3px);
            box-shadow: 0 12px 25px rgba(0, 123, 255, 0.4);
            color: white;
        }

        .action-btn.upload-btn {
            background: linear-gradient(135deg, #28a745, #20c997);
            box-shadow: 0 8px 20px rgba(40, 167, 69, 0.3);
        }

        .action-btn.upload-btn:hover {
            box-shadow: 0 12px 25px rgba(40, 167, 69, 0.4);
        }

        .action-btn.export-btn {
            background: linear-gradient(135deg, #6f42c1, #5a32a3);
            box-shadow: 0 8px 20px rgba(111, 66, 193, 0.3);
        }

        .action-btn.export-btn:hover {
            box-shadow: 0 12px 25px rgba(111, 66, 193, 0.4);
        }

        .upload-area {
            background: linear-gradient(135deg, #2c313a 0%, #3a3f4a 100%);
            border: 3px dashed rgba(255, 224, 102, 0.3);
            border-radius: 16px;
            padding: 3rem 2rem;
            text-align: center;
            margin-bottom: 2rem;
            transition: all 0.3s ease;
            position: relative;
            overflow: hidden;
        }

        .upload-area::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: linear-gradient(45deg, rgba(255, 224, 102, 0.05) 0%, transparent 50%, rgba(255, 224, 102, 0.05) 100%);
            pointer-events: none;
        }

        .upload-area:hover {
            border-color: rgba(255, 224, 102, 0.6);
            transform: translateY(-2px);
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
        }

        .upload-area.dragover {
            border-color: #ffe066;
            background: rgba(255, 224, 102, 0.1);
        }

        .upload-icon {
            font-size: 3rem;
            color: #ffe066;
            margin-bottom: 1rem;
            transition: all 0.3s ease;
        }

        .upload-area:hover .upload-icon {
            transform: scale(1.1);
            color: #ffd700;
        }

        .upload-text {
            color: #ffffff;
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .upload-subtext {
            color: rgba(255, 255, 255, 0.7);
            font-size: 0.9rem;
        }

        .gallery-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .gallery-item {
            background: linear-gradient(135deg, #2c313a 0%, #3a3f4a 100%);
            border: none;
            border-radius: 16px;
            overflow: hidden;
            box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
            transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
            position: relative;
        }

        .gallery-item::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 3px;
            background: linear-gradient(90deg, #ffe066, #ffd700, #ffe066);
            transform: scaleX(0);
            transition: transform 0.3s ease;
            z-index: 2;
        }

        .gallery-item:hover {
            transform: translateY(-8px) scale(1.02);
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        }

        .gallery-item:hover::before {
            transform: scaleX(1);
        }

        .gallery-image {
            width: 100%;
            height: 200px;
            object-fit: cover;
            transition: all 0.3s ease;
        }

        .gallery-item:hover .gallery-image {
            transform: scale(1.05);
        }

        .gallery-content {
            padding: 1.5rem;
        }

        .gallery-title {
            color: #ffe066;
            font-size: 1.2rem;
            font-weight: 700;
            margin-bottom: 0.5rem;
            text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
        }

        .gallery-description {
            color: #e0e0e0;
            font-size: 0.9rem;
            line-height: 1.5;
            margin-bottom: 1rem;
            display: -webkit-box;
            -webkit-line-clamp: 3;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }

        .gallery-meta {
            color: #b0b0b0;
            font-size: 0.8rem;
            margin-bottom: 1rem;
        }

        .gallery-actions {
            display: flex;
            gap: 0.5rem;
            flex-wrap: wrap;
        }

        .gallery-btn {
            background: linear-gradient(135deg, #007bff, #0056b3);
            border: none;
            color: white;
            font-weight: 600;
            padding: 0.5rem 1rem;
            border-radius: 8px;
            font-size: 0.8rem;
            text-transform: uppercase;
            letter-spacing: 0.5px;
            transition: all 0.3s ease;
            flex: 1;
            min-width: 80px;
        }

        .gallery-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 123, 255, 0.3);
            color: white;
        }

        .gallery-btn.edit-btn {
            background: linear-gradient(135deg, #ffc107, #e0a800);
        }

        .gallery-btn.edit-btn:hover {
            box-shadow: 0 5px 15px rgba(255, 193, 7, 0.3);
        }

        .gallery-btn.delete-btn {
            background: linear-gradient(135deg, #dc3545, #c82333);
        }

        .gallery-btn.delete-btn:hover {
            box-shadow: 0 5px 15px rgba(220, 53, 69, 0.3);
        }

        .modal-content {
            background: linear-gradient(135deg, #2c313a 0%, #3a3f4a 100%);
            border: none;
            border-radius: 16px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
        }

        .modal-header {
            background: linear-gradient(135deg, #181a1b 0%, #23272f 100%);
            border-bottom: 2px solid rgba(255, 224, 102, 0.2);
            color: #ffe066;
        }

        .modal-body {
            color: #e0e0e0;
        }

        .form-control {
            background: rgba(44, 49, 58, 0.8);
            border: 2px solid rgba(255, 224, 102, 0.3);
            border-radius: 8px;
            color: white;
            padding: 0.75rem 1rem;
        }

        .form-control:focus {
            background: rgba(44, 49, 58, 0.9);
            border-color: #ffe066;
            box-shadow: 0 0 0 0.2rem rgba(255, 224, 102, 0.25);
            color: white;
        }

        .form-label {
            color: #ffe066;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .alert {
            border-radius: 12px;
            border: none;
            font-weight: 600;
            box-shadow: 0 8px 20px rgba(0, 0, 0, 0.15);
            margin-bottom: 2rem;
        }

        .alert-success {
            background: linear-gradient(135deg, #28a745, #20c997);
            color: white;
        }

        .alert-danger {
            background: linear-gradient(135deg, #dc3545, #c82333);
            color: white;
        }

        .loading {
            opacity: 0.6;
            pointer-events: none;
        }

        .loading::after {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 20px;
            height: 20px;
            margin: -10px 0 0 -10px;
            border: 2px solid #ffe066;
            border-top: 2px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Responsive Design */
        @media (max-width: 768px) {
            .gallery-admin-container {
                padding: 1rem;
            }
            
            .admin-title {
                font-size: 2.5rem;
            }
            
            .admin-header {
                padding: 1.5rem 1rem;
            }
            
            .stats-grid {
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 1rem;
            }
            
            .action-buttons {
                flex-direction: column;
            }
            
            .action-btn {
                width: 100%;
            }
            
            .gallery-grid {
                grid-template-columns: 1fr;
            }
            
            .gallery-actions {
                flex-direction: column;
            }
            
            .gallery-btn {
                width: 100%;
            }
        }

        @media (max-width: 480px) {
            .admin-title {
                font-size: 2rem;
            }
            
            .stat-number {
                font-size: 2rem;
            }
            
            .upload-area {
                padding: 2rem 1rem;
            }
            
            .upload-icon {
                font-size: 2.5rem;
            }
        }

        /* Footer positioning fixes */
        .site-footer {
            position: relative;
            z-index: 10;
            background: linear-gradient(135deg, #1a1d24 0%, #23272f 100%);
            margin-top: auto;
            border-top: 1px solid rgba(255, 224, 102, 0.1);
            padding: 2rem 0;
        }

        .gallery-grid {
            position: relative;
            z-index: 1;
        }
    </style>
</head>
<body>
    <%- include("../partials/navbar", { user, active }) %>
    
    <div class="gallery-admin-container">
        <% if (alert) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <%= alert %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        <% if (error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        
        <!-- Admin Header -->
        <div class="admin-header">
            <h1 class="admin-title">
                <i class="bi bi-images me-3"></i>Gallery Administration
            </h1>
            <p class="admin-subtitle">Manage and organize your photo gallery</p>
        </div>
        
        <!-- Statistics Grid -->
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-number" id="totalImages"><%= images.length %></div>
                <div class="stat-label">Total Images</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="totalSize"><%= (images.reduce((sum, img) => sum + (img.file_size || 0), 0) / (1024 * 1024)).toFixed(1) %> MB</div>
                <div class="stat-label">Total Size</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="recentUploads"><%= images.filter(img => new Date(img.uploaded_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)).length %></div>
                <div class="stat-label">Recent Uploads</div>
            </div>
            <div class="stat-card">
                <div class="stat-number" id="pendingEdits">0</div>
                <div class="stat-label">Pending Edits</div>
            </div>
        </div>
        
        <!-- Action Buttons -->
        <div class="action-buttons">
            <button class="action-btn upload-btn" onclick="openUploadModal()">
                <i class="bi bi-cloud-upload me-2"></i>Upload Image
            </button>
            <button class="action-btn" onclick="toggleBulkSelect()">
                <i class="bi bi-check2-square me-2"></i>Bulk Select
            </button>
            <button class="action-btn" onclick="openReorderModal()">
                <i class="bi bi-arrow-down-up me-2"></i>Reorder
            </button>
            <a href="/gallery-admin/export" class="action-btn export-btn">
                <i class="bi bi-download me-2"></i>Export
            </a>
        </div>
        
        <!-- Upload Area -->
        <div class="upload-area" id="uploadArea" onclick="document.getElementById('imageInput').click()">
            <div class="upload-icon">
                <i class="bi bi-cloud-upload"></i>
            </div>
            <div class="upload-text">Drag & Drop Images Here</div>
            <div class="upload-subtext">or click to browse files</div>
            <input type="file" id="imageInput" accept="image/*" multiple style="display: none;" onchange="handleFileSelect(event)">
        </div>
        
        <!-- Gallery Grid -->
        <div class="gallery-grid">
            <% images.forEach((image, index) => { %>
                <div class="gallery-item" data-id="<%= image.id %>">
                    <img src="/uploads/gallery/<%= image.filename %>" alt="<%= image.original_name %>" class="gallery-image">
                    <div class="gallery-content">
                        <div class="gallery-title"><%= image.original_name %></div>
                        <div class="gallery-description"><%= image.description || 'No description' %></div>
                        <div class="gallery-meta">
                            <div>Uploaded: <%= new Date(image.uploaded_at).toLocaleDateString() %></div>
                            <div>Size: <%= (image.file_size / (1024 * 1024)).toFixed(2) %> MB</div>
                            <div>Order: <%= image.display_order %></div>
                        </div>
                        <div class="gallery-actions">
                            <button class="gallery-btn edit-btn" onclick="openEditModal('<%= image.id %>', '<%= image.description %>', <%= image.display_order %>)">
                                <i class="bi bi-pencil me-1"></i>Edit
                            </button>
                            <button class="gallery-btn" onclick="openPreviewModal('<%= image.id %>')">
                                <i class="bi bi-eye me-1"></i>Preview
                            </button>
                            <button class="gallery-btn delete-btn" onclick="deleteImage('<%= image.id %>')">
                                <i class="bi bi-trash me-1"></i>Delete
                            </button>
                        </div>
                    </div>
                </div>
            <% }) %>
        </div>
    </div>

    <!-- Upload Modal -->
    <div class="modal fade" id="uploadModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-cloud-upload me-2"></i>Upload Image
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <form id="uploadForm" method="POST" action="/gallery-admin/upload" enctype="multipart/form-data">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="uploadImage" class="form-label">Select Image</label>
                            <input type="file" class="form-control" id="uploadImage" name="image" accept="image/*" required>
                        </div>
                        <div class="mb-3">
                            <label for="uploadDescription" class="form-label">Description (Optional)</label>
                            <textarea class="form-control" id="uploadDescription" name="description" rows="3" placeholder="Enter image description..."></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-cloud-upload me-2"></i>Upload
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit Modal -->
    <div class="modal fade" id="editModal" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-pencil me-2"></i>Edit Image
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <form id="editForm" method="POST" action="">
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="editDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="editDescription" name="description" rows="3" placeholder="Enter image description..."></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="editOrder" class="form-label">Display Order</label>
                            <input type="number" class="form-control" id="editOrder" name="display_order" min="0" placeholder="0">
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">
                            <i class="bi bi-check me-2"></i>Save Changes
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Preview Modal -->
    <div class="modal fade" id="previewModal" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-eye me-2"></i>Image Preview
                    </h5>
                    <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body text-center">
                    <img id="previewImage" src="" alt="Preview" style="max-width: 100%; max-height: 60vh; object-fit: contain;">
                    <div id="previewDescription" class="mt-3"></div>
                </div>
            </div>
        </div>
    </div>

    <%- include("../partials/footer") %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    
    <script>
        // Update stats
        function updateStats() {
            const totalImages = document.querySelectorAll('.gallery-item').length;
            const totalSize = Array.from(document.querySelectorAll('.gallery-item')).reduce((sum, item) => {
                const sizeText = item.querySelector('.gallery-meta').textContent.match(/Size: ([\d.]+) MB/);
                return sum + (sizeText ? parseFloat(sizeText[1]) : 0);
            }, 0);
            
            document.getElementById('totalImages').textContent = totalImages;
            document.getElementById('totalSize').textContent = totalSize.toFixed(1) + ' MB';
        }

        // Drag and drop functionality
        const uploadArea = document.getElementById('uploadArea');
        
        uploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            uploadArea.classList.add('dragover');
        });
        
        uploadArea.addEventListener('dragleave', () => {
            uploadArea.classList.remove('dragover');
        });
        
        uploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            uploadArea.classList.remove('dragover');
            const files = e.dataTransfer.files;
            handleFiles(files);
        });

        function handleFileSelect(event) {
            const files = event.target.files;
            handleFiles(files);
        }

        function handleFiles(files) {
            if (files.length > 0) {
                const formData = new FormData();
                formData.append('image', files[0]);
                
                const description = prompt('Enter description (optional):');
                if (description !== null) {
                    formData.append('description', description);
                }
                
                uploadFile(formData);
            }
        }

        function uploadFile(formData) {
            fetch('/gallery-admin/upload', {
                method: 'POST',
                body: formData
            }).then(response => {
                if (response.ok) {
                    location.reload();
                } else {
                    alert('Upload failed');
                }
            }).catch(error => {
                console.error('Error:', error);
                alert('Upload failed');
            });
        }

        // Modal functions
        function openUploadModal() {
            const modal = new bootstrap.Modal(document.getElementById('uploadModal'));
            modal.show();
        }

        function openEditModal(id, description, order) {
            document.getElementById('editDescription').value = description || '';
            document.getElementById('editOrder').value = order || 0;
            document.getElementById('editForm').action = `/gallery-admin/update/${id}`;
            
            const modal = new bootstrap.Modal(document.getElementById('editModal'));
            modal.show();
        }

        function openPreviewModal(id) {
            const image = document.querySelector(`[data-id="${id}"]`);
            const imgSrc = image.querySelector('.gallery-image').src;
            const description = image.querySelector('.gallery-description').textContent;
            
            document.getElementById('previewImage').src = imgSrc;
            document.getElementById('previewDescription').textContent = description;
            
            const modal = new bootstrap.Modal(document.getElementById('previewModal'));
            modal.show();
        }

        function deleteImage(id) {
            if (confirm('Are you sure you want to delete this image?')) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = `/gallery-admin/delete/${id}`;
                document.body.appendChild(form);
                form.submit();
            }
        }

        function toggleBulkSelect() {
            const items = document.querySelectorAll('.gallery-item');
            const isBulkMode = document.querySelector('.bulk-select-mode');
            
            if (!isBulkMode) {
                // Enable bulk select mode
                items.forEach(item => {
                    const checkbox = document.createElement('input');
                    checkbox.type = 'checkbox';
                    checkbox.className = 'bulk-checkbox';
                    checkbox.style.cssText = 'position: absolute; top: 10px; left: 10px; z-index: 10; transform: scale(1.5);';
                    item.style.position = 'relative';
                    item.appendChild(checkbox);
                });
                
                // Add bulk actions
                const bulkActions = document.createElement('div');
                bulkActions.className = 'bulk-actions alert alert-warning';
                bulkActions.innerHTML = `
                    <div class="d-flex justify-content-between align-items-center">
                        <span>Bulk Select Mode - Select images to delete</span>
                        <div>
                            <button class="btn btn-danger btn-sm me-2" onclick="bulkDelete()">
                                <i class="bi bi-trash me-1"></i>Delete Selected
                            </button>
                            <button class="btn btn-secondary btn-sm" onclick="exitBulkMode()">
                                <i class="bi bi-x me-1"></i>Exit
                            </button>
                        </div>
                    </div>
                `;
                bulkActions.classList.add('bulk-select-mode');
                document.querySelector('.action-buttons').after(bulkActions);
                
                // Update button text
                event.target.innerHTML = '<i class="bi bi-check2-square me-2"></i>Exit Bulk Select';
            } else {
                exitBulkMode();
            }
        }
        
        function exitBulkMode() {
            // Remove checkboxes
            document.querySelectorAll('.bulk-checkbox').forEach(checkbox => checkbox.remove());
            
            // Remove bulk actions
            const bulkActions = document.querySelector('.bulk-actions');
            if (bulkActions) bulkActions.remove();
            
            // Reset button text
            event.target.innerHTML = '<i class="bi bi-check2-square me-2"></i>Bulk Select';
        }
        
        function bulkDelete() {
            const selectedIds = Array.from(document.querySelectorAll('.bulk-checkbox:checked'))
                .map(checkbox => checkbox.closest('.gallery-item').dataset.id);
            
            if (selectedIds.length === 0) {
                alert('No images selected');
                return;
            }
            
            if (confirm(`Are you sure you want to delete ${selectedIds.length} image(s)?`)) {
                const form = document.createElement('form');
                form.method = 'POST';
                form.action = '/gallery-admin/bulk-delete';
                
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = 'imageIds';
                input.value = JSON.stringify(selectedIds);
                form.appendChild(input);
                
                document.body.appendChild(form);
                form.submit();
            }
        }

        function openReorderModal() {
            const images = Array.from(document.querySelectorAll('.gallery-item'));
            let modalContent = `
                <div class="modal fade" id="reorderModal" tabindex="-1">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">
                                    <i class="bi bi-arrow-down-up me-2"></i>Reorder Images
                                </h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal"></button>
                            </div>
                            <div class="modal-body">
                                <p class="text-muted mb-3">Drag and drop images to reorder them:</p>
                                <div id="reorderList" class="list-group">
            `;
            
            images.forEach((item, index) => {
                const imgSrc = item.querySelector('.gallery-image').src;
                const title = item.querySelector('.gallery-title').textContent;
                modalContent += `
                    <div class="list-group-item d-flex align-items-center" data-id="${item.dataset.id}" data-order="${index}">
                        <i class="bi bi-grip-vertical me-3" style="cursor: move;"></i>
                        <img src="${imgSrc}" alt="${title}" style="width: 50px; height: 50px; object-fit: cover; margin-right: 15px;">
                        <span>${title}</span>
                        <span class="ms-auto badge bg-secondary">${index + 1}</span>
                    </div>
                `;
            });
            
            modalContent += `
                                </div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                                <button type="button" class="btn btn-primary" onclick="saveReorder()">
                                    <i class="bi bi-check me-2"></i>Save Order
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            // Remove existing modal if any
            const existingModal = document.getElementById('reorderModal');
            if (existingModal) existingModal.remove();
            
            // Add new modal
            document.body.insertAdjacentHTML('beforeend', modalContent);
            
            // Initialize sortable
            const reorderList = document.getElementById('reorderList');
            if (reorderList) {
                // Simple drag and drop implementation
                let draggedItem = null;
                
                reorderList.addEventListener('dragstart', (e) => {
                    draggedItem = e.target;
                    e.target.style.opacity = '0.5';
                });
                
                reorderList.addEventListener('dragend', (e) => {
                    e.target.style.opacity = '1';
                });
                
                reorderList.addEventListener('dragover', (e) => {
                    e.preventDefault();
                });
                
                reorderList.addEventListener('drop', (e) => {
                    e.preventDefault();
                    if (draggedItem && e.target.closest('.list-group-item')) {
                        const targetItem = e.target.closest('.list-group-item');
                        if (draggedItem !== targetItem) {
                            const allItems = Array.from(reorderList.children);
                            const draggedIndex = allItems.indexOf(draggedItem);
                            const targetIndex = allItems.indexOf(targetItem);
                            
                            if (draggedIndex < targetIndex) {
                                targetItem.parentNode.insertBefore(draggedItem, targetItem.nextSibling);
                            } else {
                                targetItem.parentNode.insertBefore(draggedItem, targetItem);
                            }
                            
                            // Update order numbers
                            allItems.forEach((item, index) => {
                                item.dataset.order = index;
                                item.querySelector('.badge').textContent = index + 1;
                            });
                        }
                    }
                });
                
                // Make items draggable
                reorderList.querySelectorAll('.list-group-item').forEach(item => {
                    item.draggable = true;
                });
            }
            
            const modal = new bootstrap.Modal(document.getElementById('reorderModal'));
            modal.show();
        }
        
        function saveReorder() {
            const items = Array.from(document.getElementById('reorderList').children);
            const orderData = items.map((item, index) => ({
                id: item.dataset.id,
                order: index
            }));
            
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/gallery-admin/reorder';
            
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'orderData';
            input.value = JSON.stringify(orderData);
            form.appendChild(input);
            
            document.body.appendChild(form);
            form.submit();
        }

        // Initialize
        updateStats();
    </script>
</body>
</html> 