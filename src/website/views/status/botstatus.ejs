<!DOCTYPE html>
<html>
  <head>
    <title>Bot Status</title>
    <meta content="1A Website" property="og:title" />
    <meta content="Welcome to 1A!" property="og:description" />
    <meta content="https://1a75.org/botstatus" property="og:url" />
    <meta content="https://cdn.xanderxx.xyz/1a-logo.png" property="og:image" />
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link rel="stylesheet" href="/custom.css" />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css"
    />
    <style>
      .status-table th,
      .status-table td {
        color: #fff;
        background: #23272f;
      }
      .status-table th {
        background: #181a1b;
      }
      .status-online {
        color: #27ae60;
        font-weight: bold;
      }
      .status-offline {
        color: #e74c3c;
        font-weight: bold;
      }
      .restart-btn {
        min-width: 140px;
      }
      .refresh-btn {
        min-width: 140px;
      }
      .progress {
        height: 20px;
        background-color: #2c3e50;
      }
      .progress-bar {
        line-height: 20px;
        font-size: 12px;
        font-weight: bold;
      }
      .metric-card {
        background: #23272f;
        border: 1px solid #404040;
        border-radius: 8px;
        padding: 15px;
        margin-bottom: 15px;
      }
      .metric-title {
        color: #fff;
        font-size: 14px;
        font-weight: bold;
        margin-bottom: 10px;
      }
      .metric-value {
        color: #fff;
        font-size: 18px;
        font-weight: bold;
      }
      .metric-subtitle {
        color: #aaa;
        font-size: 12px;
      }
      .usage-high {
        color: #e74c3c;
        font-weight: bold;
      }
      .usage-medium {
        color: #f39c12;
        font-weight: bold;
      }
      .usage-low {
        color: #27ae60;
        font-weight: bold;
      }
    </style>
  </head>
  <body>
    <%- include("../partials/navbar", { user, active }) %>
    <div class="container mt-5">
      <h2 class="mb-4 text-center">
        <i class="bi bi-robot me-2"></i>Bot Status
      </h2>
      
      <div class="d-flex justify-content-center mb-4">
        <button id="refreshBtn" class="btn btn-primary refresh-btn me-2">
          <i class="bi bi-arrow-clockwise"></i> Refresh Status
        </button>
        <button id="restartBtn" class="btn btn-danger restart-btn">
          <i class="bi bi-arrow-repeat"></i> Restart Bot
        </button>
      </div>
      
      <div id="status-container" class="d-flex justify-content-center">
        <div class="w-100" style="max-width: 800px;">
          <!-- Bot Information -->
          <div class="card bg-dark text-white mb-4">
            <div class="card-header">
              <h5 class="mb-0"><i class="bi bi-info-circle me-2"></i>Bot Information</h5>
            </div>
            <div class="card-body">
              <div class="row">
                <div class="col-md-6">
                  <table class="table table-dark table-borderless mb-0">
                    <tbody>
                      <tr>
                        <td><strong>Bot Tag:</strong></td>
                        <td id="bot-tag">Loading...</td>
                      </tr>
                      <tr>
                        <td><strong>Status:</strong></td>
                        <td id="bot-status">Loading...</td>
                      </tr>
                      <tr>
                        <td><strong>Node.js Version:</strong></td>
                        <td id="bot-node">Loading...</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
                <div class="col-md-6">
                  <table class="table table-dark table-borderless mb-0">
                    <tbody>
                      <tr>
                        <td><strong>Guilds:</strong></td>
                        <td id="bot-guilds">Loading...</td>
                      </tr>
                      <tr>
                        <td><strong>Users (cached):</strong></td>
                        <td id="bot-users">Loading...</td>
                      </tr>
                      <tr>
                        <td><strong>Last Ready:</strong></td>
                        <td id="bot-ready">Loading...</td>
                      </tr>
                    </tbody>
                  </table>
                </div>
              </div>
            </div>
          </div>

          <!-- Performance Metrics -->
          <div class="card bg-dark text-white mb-4">
            <div class="card-header">
              <h5 class="mb-0"><i class="bi bi-speedometer2 me-2"></i>Performance Metrics</h5>
            </div>
            <div class="card-body">
              <div class="row mb-3">
                <div class="col-md-6">
                  <strong>Uptime:</strong> <span id="bot-uptime">Loading...</span>
                </div>
                <div class="col-md-6">
                  <strong>Memory Usage:</strong> <span id="bot-memory">Loading...</span>
                </div>
              </div>
              
                             <!-- Memory Usage Progress Bar -->
               <div class="mb-3">
                 <div class="d-flex justify-content-between mb-1">
                   <span class="text-white">Memory Usage (vs 500MB baseline)</span>
                   <span id="mem-percent" class="text-white">0%</span>
                 </div>
                 <div class="progress">
                   <div id="mem-progress" class="progress-bar" role="progressbar" style="width: 0%">
                     0%
                   </div>
                 </div>
                 <small class="text-muted">Based on typical Discord bot memory usage patterns</small>
               </div>
              
              <!-- Metric Cards -->
              <div class="row">
                <div class="col-md-4">
                  <div class="metric-card">
                    <div class="metric-title">Guild Count</div>
                    <div class="metric-value" id="guilds-metric">Loading...</div>
                    <div class="metric-subtitle">Active servers</div>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="metric-card">
                    <div class="metric-title">User Count</div>
                    <div class="metric-value" id="users-metric">Loading...</div>
                    <div class="metric-subtitle">Cached users</div>
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="metric-card">
                    <div class="metric-title">Uptime</div>
                    <div class="metric-value" id="uptime-metric">Loading...</div>
                    <div class="metric-subtitle">Time running</div>
                  </div>
                </div>
              </div>
            </div>
          </div>
          
          <div id="restart-status" class="text-center mt-2"></div>
        </div>
      </div>
    </div>
    <%- include("../partials/footer") %>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      async function fetchStatus() {
        try {
          const res = await fetch('/botstatus/api');
          if (!res.ok) throw new Error('Failed to fetch status');
          const status = await res.json();
          
          // Update bot information
          document.getElementById('bot-tag').textContent = `${status.tag} (${status.id})`;
          document.getElementById('bot-status').innerHTML = 
            `<span class="status-${status.status.toLowerCase()}">
              <i class="bi bi-circle-fill me-1"></i>${status.status}
            </span>`;
          document.getElementById('bot-node').textContent = status.nodeVersion;
          document.getElementById('bot-guilds').textContent = status.guilds;
          document.getElementById('bot-users').textContent = status.users;
                     // Format last ready time more human-readably
           if (status.lastReady) {
             const lastReadyDate = new Date(status.lastReady);
             const now = new Date();
             const diffMs = now - lastReadyDate;
             const diffMins = Math.floor(diffMs / (1000 * 60));
             const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
             const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
             
             let timeAgo;
             if (diffDays > 0) {
               timeAgo = `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
             } else if (diffHours > 0) {
               timeAgo = `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
             } else if (diffMins > 0) {
               timeAgo = `${diffMins} minute${diffMins > 1 ? 's' : ''} ago`;
             } else {
               timeAgo = 'Just now';
             }
             
             document.getElementById('bot-ready').textContent = `${timeAgo} (${lastReadyDate.toLocaleString()})`;
           } else {
             document.getElementById('bot-ready').textContent = 'N/A';
           }
          
          // Update performance metrics
          const uptimeFormatted = formatUptime(status.uptime);
          document.getElementById('bot-uptime').textContent = uptimeFormatted;
          document.getElementById('bot-memory').textContent = status.memoryMB + ' MB';
          
          // Update metric cards
          document.getElementById('guilds-metric').textContent = status.guilds;
          document.getElementById('users-metric').textContent = status.users;
          document.getElementById('uptime-metric').textContent = uptimeFormatted;
          
                     // Update memory progress bar (using a more realistic baseline)
           // Most Discord bots typically use 100-500MB, so we'll use 500MB as baseline
           const maxMemory = 500; // MB
           const memoryPercent = Math.min((status.memoryMB / maxMemory) * 100, 100);
          const memPercentElement = document.getElementById('mem-percent');
          const memProgressElement = document.getElementById('mem-progress');
          
          memPercentElement.textContent = `${memoryPercent.toFixed(1)}%`;
          memProgressElement.style.width = `${memoryPercent}%`;
          memProgressElement.textContent = `${memoryPercent.toFixed(1)}%`;
          
          // Update memory usage color
          memPercentElement.className = '';
          if (memoryPercent > 80) {
            memPercentElement.classList.add('usage-high');
          } else if (memoryPercent > 60) {
            memPercentElement.classList.add('usage-medium');
          } else {
            memPercentElement.classList.add('usage-low');
          }
          
        } catch (e) {
          document.getElementById('status-container').innerHTML = 
            '<div class="alert alert-danger text-center">Bot is offline or unreachable.</div>';
        }
      }

      function formatUptime(seconds) {
        seconds = Math.floor(seconds);
        const h = Math.floor(seconds / 3600);
        const m = Math.floor((seconds % 3600) / 60);
        const s = seconds % 60;
        return `${h}h ${m}m ${s}s`;
      }

      // Live update every 5 seconds
      fetchStatus();
      setInterval(fetchStatus, 5000);

      // Refresh button
      document.getElementById('refreshBtn').onclick = function() {
        fetchStatus();
      };

      // Restart button
      document.getElementById('restartBtn').onclick = async function () {
        if (!confirm('Are you sure you want to restart the bot?')) return;
        document.getElementById('restart-status').textContent = 'Restarting...';
        try {
          const res = await fetch('/botstatus/api/restart', {
            method: 'POST',
          });
          if (res.ok) {
            document.getElementById('restart-status').textContent = 'Restart command sent!';
          } else {
            document.getElementById('restart-status').textContent = 'Failed to restart bot.';
          }
        } catch (e) {
          document.getElementById('restart-status').textContent = 'Failed to restart bot.';
        }
      };
    </script>
  </body>
</html>
